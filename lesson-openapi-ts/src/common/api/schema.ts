/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/auth/check-recovery-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check recovery code for valid */
        post: operations["AuthController_checkPasswordRecovery"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/github/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Try login user to the system with github */
        get: operations["GithubOauthController_login"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/google/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login via Google OAuth */
        post: operations["GoogleOAuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Try login user to the system */
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** In cookie client must send correct refresh Token that will be revoked */
        post: operations["AuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about current user */
        get: operations["AuthController_getMyInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/new-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Confirm Password recovery */
        post: operations["AuthController_newPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/password-recovery": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Password recovery via Email confirmation. Email should be sent with RecoveryCode inside */
        post: operations["AuthController_passwordRecovery"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/password-recovery-resending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Password recovery resending via Email confirmation. Email should be sent with RecoveryCode inside */
        post: operations["AuthController_resendingPasswordRecovery"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/registration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Registration in the system. Email with confirmation code will be send to passed email address */
        post: operations["AuthController_registration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/registration-confirmation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Confirm registration */
        post: operations["AuthController_registrationConfirmation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/registration-email-resending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resend confirmation registration Email if user exists */
        post: operations["AuthController_registrationEmailResending"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/update-tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**  'Generate new pair of access and refresh tokens (in cookie client must send correct refresh Token that will be revoked after refreshing) Device LastActiveDate should\n' +
         *     'be overrode by issued Date of new refresh token', */
        post: operations["AuthController_updateTokens"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check for Database */
        get: operations["HealthController_check"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/home/publications-followers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get publications of followers */
        get: operations["HomeController_getPublicationsFollowers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/messenger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get array of latest messages */
        get: operations["MessengerController_getAllMessages"];
        /** Update message status */
        put: operations["MessengerController_updateMessagesStatus"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/messenger/{dialoguePartnerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get array of messages by user */
        get: operations["MessengerController_findMessagesByUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/messenger/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete message by ID */
        delete: operations["MessengerController_deleteMessageById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications/mark-as-read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Mark notifications as read */
        put: operations["NotificationController_updateNotificationsIsRead"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications/{cursor}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get notification by profile */
        get: operations["NotificationController_getNotification"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete notification by id */
        delete: operations["NotificationController_removeNotification"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create post */
        post: operations["PostsController_createPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/id/{postId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get post by id */
        get: operations["PostsController_getPost"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upload image post */
        post: operations["PostsController_uploadImagePost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/image/{uploadId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete image post */
        delete: operations["PostsController_deleteImagePost"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/user/{userId}/{endCursorPostId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all post by userId or profileId with pagination
         * @description Get posts by user id
         */
        get: operations["PostsController_getPostsByUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/{param}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get posts with pagination by username or endCursorPostId */
        get: operations["PostsController_getPosts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/{postId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update post by id */
        put: operations["PostsController_updatePost"];
        post?: never;
        /** @description Delete post by id */
        delete: operations["PostsController_deletePost"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/{postId}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get comments with pagination */
        get: operations["PostsController_getComments"];
        put?: never;
        /** Create a new comment */
        post: operations["PostsCommentsController_createComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/{postId}/comments/{commentId}/answers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get answers with pagination */
        get: operations["PostsController_getAnswers"];
        put?: never;
        /** Create a new answer comment */
        post: operations["PostsCommentsController_createAnswerComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/{postId}/comments/{commentId}/answers/{answerId}/like-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update like status answer */
        put: operations["PostsCommentsController_updateLikeStatusAnswer"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/{postId}/comments/{commentId}/answers/{answerId}/likes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get answer likes */
        get: operations["PostsController_getAnswerLikes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/{postId}/comments/{commentId}/like-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update like status comment */
        put: operations["PostsCommentsController_updateLikeStatusComment"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/{postId}/comments/{commentId}/likes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get comment likes */
        get: operations["PostsController_getCommentLikes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/{postId}/like-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update like status post */
        put: operations["PostsController_updateLikeStatusPost"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/posts/{postId}/likes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get post likes */
        get: operations["PostsController_getLikes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/public-posts/all/{endCursorPostId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all posts with pagination
         * @deprecated
         * @description Get all posts
         */
        get: operations["PublicPostsController_getAllPosts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/public-posts/user/{userId}/{endCursorPostId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all post by userId or profileId with pagination
         * @deprecated
         * @description Get posts by user id
         */
        get: operations["PublicPostsController_getPostsByUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/public-posts/{postId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get post by id
         * @deprecated
         * @description Get post by id
         */
        get: operations["PublicPostsController_getPost"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/public-posts/{postId}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: operations["PublicPostsController_getComments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/public-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get total count registered users in app */
        get: operations["PublicUserController_GetCountRegisteredUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/public-user/profile/{profileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get public profile for user by id from url param */
        get: operations["PublicUserController_getPublicProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve all sessions for the authenticated user. */
        get: operations["SessionsController_getSessions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/terminate-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Deletes all session expect current session */
        delete: operations["SessionsController_terminateAllSession"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/{deviceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Deletes a session for the authenticated user by session ID. */
        delete: operations["SessionsController_deleteSession"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create payment-subscriptions */
        post: operations["SubscriptionsController_createSubscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/subscriptions/canceled-auto-renewal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel auto renewal */
        post: operations["SubscriptionsController_canceledAutoRenewal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/subscriptions/cost-of-payment-subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get cost of payment-subscriptions */
        get: operations["GetSubscriptionsController_getCurrentCostSubscription"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/subscriptions/current-payment-subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current payment-subscriptions */
        get: operations["SubscriptionsController_getCurrentSubscription"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/subscriptions/my-payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get payments */
        get: operations["SubscriptionsController_getMyPayments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/subscriptions/renew-auto-renewal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Renew auto renewal */
        post: operations["SubscriptionsController_renewAutoRenewal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get profile user */
        get: operations["UsersFollowController_searchUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/follower/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove follower from followers */
        delete: operations["UsersFollowController_removeFollower"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/following": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description test */
        post: operations["UsersFollowController_subscriptionToUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get profile for user */
        get: operations["UsersController_getMyProfile"];
        /** Update profile for user */
        put: operations["UsersController_updateProfile"];
        post?: never;
        /** Delete your profile  for testing */
        delete: operations["UsersController_deleteProfile"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/profile/avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload providers square image for Avatar profile (.png or jpg (jpeg) file, max size is 10Mb  */
        post: operations["UsersController_uploadPhotoAvatar"];
        /** Delete providers square image for Avatar profile */
        delete: operations["UsersController_deleteAvatarProfile"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/profile/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete profile custom user by id  for testing */
        delete: operations["UsersController_deleteProfileById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get profile user by userId with posts */
        get: operations["UsersFollowController_getProfileByUserName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userName}/followers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get followers by username  */
        get: operations["UsersFollowController_getFollowers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userName}/following": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get followers by username */
        get: operations["UsersFollowController_getFollowing"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        InfinityPaginationViewModel: {
            /** @example 12 */
            pageSize: number;
            /** @example 100 */
            totalCount: number;
            /** @example 100 */
            notReadCount?: number;
        };
        /** @enum {string} */
        MessageType: "TEXT" | "IMAGE" | "VOICE";
        /** @enum {string} */
        MessageStatus: "SENT" | "RECEIVED" | "READ";
        AvatarViewDto: {
            /** @example https://example.com/image.jpg */
            url: string;
            /** @example 300 */
            width: number;
            /** @example 300 */
            height: number;
            /** @example 300 */
            fileSize: number;
            /**
             * Format: date-time
             * @example 2025-06-24T15:12:01.163Z
             */
            createdAt?: string;
        };
        LastMessageViewDto: {
            id: number;
            ownerId: number;
            receiverId: number;
            messageText: string;
            /**
             * Format: date-time
             * @example 2025-06-24T15:12:01.902Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-06-24T15:12:01.902Z
             */
            updatedAt: string;
            messageType: components["schemas"]["MessageType"];
            status: components["schemas"]["MessageStatus"];
            userName: string;
            avatars: components["schemas"]["AvatarViewDto"][];
        };
        MessageViewModel: {
            id: number;
            ownerId: number;
            receiverId: number;
            messageText: string;
            /**
             * Format: date-time
             * @example 2025-06-24T15:12:01.902Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-06-24T15:12:01.902Z
             */
            updatedAt: string;
            messageType: components["schemas"]["MessageType"];
            status: components["schemas"]["MessageStatus"];
        };
        UpdateMessagesStatusDto: {
            ids: number[];
        };
        RegisterInputDto: {
            /**
             * @description userName: name for create/registration User
             * @example string
             */
            userName: string;
            /**
             * @description email: email for create/registration User
             * @example string
             */
            email: string;
            /**
             * @description password: password for create/registration User
             * @example Ex4mple!
             */
            password: string;
            /** @example http://localhost:3000 */
            baseUrl?: string;
        };
        FieldError: {
            message: string;
            field: string;
        };
        ApiErrorResultDto: {
            statusCode: number;
            messages: components["schemas"]["FieldError"][];
            error: string;
        };
        ConfirmationCodeInputDto: {
            /** @description Code that be sent via Email inside link */
            confirmationCode: string;
        };
        RegistrationEmailResendingInputDto: {
            /**
             * @description Email User for recovery
             * @example string
             */
            email: string;
            /**
             * @description baseUrl
             * @example http://localhost:3000
             */
            baseUrl?: string;
        };
        LoginInputDto: {
            /**
             * @description Email  -  User
             * @example email@gmail.com
             */
            email: string;
            /**
             * @description Password User
             * @example qwerty
             */
            password: string;
        };
        TokenTypeSwaggerDto: {
            accessToken: string;
        };
        PasswordRecoveryInputDto: {
            /**
             * @description Email User for recovery
             * @example string
             */
            email: string;
            /** @description Recaptcha token */
            recaptcha: string;
            /** @example http://localhost:3000 */
            baseUrl?: string;
        };
        PasswordRecoveryResendingInputDto: {
            /**
             * @description Email User for recovery
             * @example string
             */
            email: string;
            /** @example http://localhost:3000 */
            baseUrl?: string;
        };
        PasswordRecoveryCodeInputDto: {
            /**
             * @description Code that be sent via Email inside link
             * @example 123456
             */
            recoveryCode: string;
        };
        PasswordRecoveryViewDto: {
            /** @example email@gmal.com */
            email: string;
        };
        NewPasswordInputDto: {
            /**
             * @description New account recovery password.
             * @example Ex4mple!
             */
            newPassword: string;
            /**
             * @description Code that be sent via Email inside link
             * @example string
             */
            recoveryCode: string;
        };
        MeViewDto: {
            /** @example 1 */
            userId: number;
            /** @example user1 */
            userName: string;
            /** @example email@gmail.com */
            email: string;
            /** @description Indicates whether the user is blocked or not */
            isBlocked: boolean;
        };
        SessionViewModel: {
            deviceId: number;
            /** @example 127.0.0.1 */
            ip: string;
            /**
             * @description Indicates the data type (datetime for ISO 8601 generation).
             * @example 2023-10-05T12:03:14.565Z
             */
            lastActive: string;
            /** @example Chrome */
            browserName: string;
            /** @example 117.0.0.0 */
            browserVersion: string;
            /**
             * @description In some cases, if the user agent string does not contain specific information about the device models or cannot be parsed correctly, the method may return undefined or an empty string.
             * @example iPhone
             */
            deviceName: string;
            /**
             * @description If the user agent string does not contain operating system information or cannot be parsed correctly, then the method may return undefined or an empty string.
             * @example iOS
             */
            osName: string;
            /** @example 14.3 */
            osVersion: string;
            /** @example mobile */
            deviceType: string;
        };
        GetAllUserSessionsResponseDto: {
            current: components["schemas"]["SessionViewModel"];
            others: components["schemas"]["SessionViewModel"][];
        };
        ProfileViewModel: {
            /** @example 1 */
            id: number;
            /** @example user1 */
            userName: string;
            /** @example John */
            firstName: string | null;
            /** @example Doe */
            lastName: string | null;
            /** @example London */
            city: string | null;
            /** @example Great Britain */
            country: string | null;
            /** @example Cambridgeshire */
            region: string | null;
            /**
             * Format: date-time
             * @example 2020-01-01
             */
            dateOfBirth: string | null;
            /** @example About me */
            aboutMe: string | null;
            avatars: components["schemas"]["AvatarViewDto"][];
            /** @example 2025-06-24T15:12:01.163Z */
            createdAt?: string;
        };
        UpdateProfileInputDto: {
            /**
             * @description User name
             * @example string
             */
            userName: string;
            /**
             * @description First name - required field
             * @example John
             */
            firstName: string;
            /**
             * @description Last name - required field
             * @example Doe
             */
            lastName: string;
            /** @description City */
            city?: string | null;
            /** @description Country */
            country?: string | null;
            region?: string | null;
            /**
             * Format: date-time
             * @example 2025-06-24T15:12:01.240Z
             */
            dateOfBirth?: string;
            /**
             * @description About me
             * @example Brief bio here
             */
            aboutMe?: string | null;
        };
        AvatarsViewModel: {
            avatars: components["schemas"]["AvatarViewDto"][];
        };
        ResponseCountRegisteredUsers: {
            /** @example 100 */
            totalCount: number;
        };
        UserMetadata: {
            /** @example 1 */
            following: number;
            /** @example 1 */
            followers: number;
            /** @example 1 */
            publications: number;
        };
        PublicProfileViewModel: {
            /** @example 1 */
            id: number;
            /** @example user1 */
            userName: string;
            /** @example About me */
            aboutMe: string;
            avatars: components["schemas"]["AvatarViewDto"][];
            userMetadata: components["schemas"]["UserMetadata"];
            hasPaymentSubscription: boolean;
        };
        ProfileViewAfterSearchModel: {
            id: number;
            userName: string;
            firstName: string;
            lastName: string;
            avatars: components["schemas"]["AvatarViewDto"][];
            /** Format: date-time */
            createdAt: string;
        };
        UserWithPaginationViewDto: {
            totalCount: number;
            pagesCount: number;
            page: number;
            pageSize: number;
            prevCursor: number;
            nextCursor: number | null;
            items: components["schemas"]["ProfileViewAfterSearchModel"];
        };
        ProfileWithPostsViewModel: {
            id: number;
            userName: string;
            firstName: string | null;
            lastName: string | null;
            city: string | null;
            country: string | null;
            region: string | null;
            /** Format: date-time */
            dateOfBirth: string | null;
            aboutMe: string | null;
            avatars: components["schemas"]["AvatarViewDto"][];
            isFollowing: boolean;
            isFollowedBy: boolean;
            followingCount: number;
            followersCount: number;
            publicationsCount: number;
        };
        UserSubscriptionInputDto: {
            selectedUserId: number;
        };
        UserFollowingFollowersViewModel: {
            id: number;
            userId: number;
            userName: string;
            /** Format: date-time */
            createdAt: string;
            avatars: components["schemas"]["AvatarViewDto"][];
            isFollowing: boolean;
            isFollowedBy: boolean;
        };
        FollowingWithPaginationViewModel: {
            totalCount: number;
            pagesCount: number;
            page: number;
            pageSize: number;
            prevCursor: number;
            nextCursor: number | null;
            items: components["schemas"]["UserFollowingFollowersViewModel"];
        };
        CreateSubscriptionInputDto: {
            /** @enum {string} */
            typeSubscription: "MONTHLY" | "DAY" | "WEEKLY";
            /** @enum {string} */
            paymentType: "STRIPE" | "PAYPAL" | "CREDIT_CARD";
            amount: number;
            baseUrl: string;
        };
        PaymentSessionUrlViewModel: {
            url: string;
        };
        ActiveSubscriptionViewModel: {
            userId: number;
            subscriptionId: string;
            /** Format: date-time */
            dateOfPayment: string;
            /** Format: date-time */
            endDateOfSubscription: string;
            autoRenewal: boolean;
        };
        CurrentActiveSubscriptionsViewModel: {
            data: components["schemas"]["ActiveSubscriptionViewModel"][];
            hasAutoRenewal: boolean;
        };
        PaymentsViewModel: {
            userId: number;
            subscriptionId: string;
            /** Format: date-time */
            dateOfPayment: string;
            /** Format: date-time */
            endDateOfSubscription: string;
            price: number;
            /** @enum {string} */
            subscriptionType: "MONTHLY" | "DAY" | "WEEKLY";
            /** @enum {string} */
            paymentType: "STRIPE" | "PAYPAL" | "CREDIT_CARD";
        };
        PricingDetailsViewModel: {
            amount: number;
            /** @enum {string} */
            typeDescription: "MONTHLY" | "DAY" | "WEEKLY";
        };
        SubscriptionPriceViewModel: {
            data: components["schemas"]["PricingDetailsViewModel"][];
        };
        NotificationViewDto: {
            /** @example 1 */
            id: number;
            /** @example Your next payment will be debited in 1 day */
            message: string;
            isRead: boolean;
            /** Format: date-time */
            createdAt: string;
        };
        UpdateNotificationIsReadDto: {
            /**
             * @description Array of notification IDs to mark as read
             * @example [
             *       1,
             *       2,
             *       3
             *     ]
             */
            ids: number[];
        };
        ProviderCodeInputDto: {
            /** @description The optional URL to which the provider should redirect after authentication. */
            redirectUrl?: string;
            code: string;
        };
        ProviderLoginResSwaggerDto: {
            accessToken: string;
            email: string;
        };
        PostImageViewModel: {
            /** @example https://example.com/image.jpg */
            url: string;
            /** @example 300 */
            width: number;
            /** @example 300 */
            height: number;
            /** @example 300 */
            fileSize: number;
            /**
             * Format: date-time
             * @example 2025-06-24T15:12:01.163Z
             */
            createdAt?: string;
            uploadId: string;
        };
        UploadedImageViewModel: {
            images: components["schemas"]["PostImageViewModel"][];
        };
        ChildMetadataDto: {
            uploadId: string;
        };
        CreatePostInputDto: {
            description?: string | null;
            childrenMetadata: components["schemas"]["ChildMetadataDto"][];
        };
        Owner: {
            /** @example firstName */
            firstName: string;
            /** @example lastName */
            lastName: string;
        };
        PostViewModel: {
            /** @example 1 */
            id: number;
            /** @example Alex */
            userName: string;
            /** @example description */
            description: string;
            /** @example location */
            location: string;
            images: components["schemas"]["PostImageViewModel"][];
            /**
             * Format: date-time
             * @example 2025-06-24T15:12:01.480Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2025-06-24T15:12:01.480Z
             */
            updatedAt: string;
            /** @example 1 */
            ownerId: number;
            /** @example https://storage.yandexcloud.net/users-inctagram/users/41/avatar/3359612b-cff9-4b6b-8897-fbbd09153d51-images-45x45 */
            avatarOwner?: string;
            /** @example {
             *       "firstName": "firstName",
             *       "lastName": "lastName"
             *     } */
            owner: components["schemas"]["Owner"];
            /** @example 1 */
            likesCount: number;
            /** @example true */
            isLiked: boolean;
            /** @example false */
            avatarWhoLikes: string[];
        };
        UpdatePostInputDto: {
            description: string | null;
        };
        UpdateLikeStatusDto: {
            /**
             * @description Send "None" if you want to un "like" or "none"
             * @default NONE
             * @enum {string}
             */
            likeStatus: "NONE" | "LIKE" | "DISLIKE";
        };
        InfinityPaginatedPosts: {
            /** @example 10 */
            totalCount: number;
            /** @example 10 */
            pageSize: number;
            /** @example 10 */
            totalUsers: number;
        };
        AvatarModel: Record<string, never>;
        ParentViewModel: {
            id: number;
            username: string;
            avatars: components["schemas"]["AvatarModel"][];
        };
        CommentsViewModel: {
            id: number;
            postId: number;
            from: components["schemas"]["ParentViewModel"];
            content: string;
            /** Format: date-time */
            createdAt: string;
            answerCount: number;
            likeCount: number;
            isLiked: boolean;
        };
        AnswersViewModel: {
            id: number;
            commentId: number;
            from: components["schemas"]["ParentViewModel"];
            content: string;
            /** Format: date-time */
            createdAt: string;
            likeCount: number;
            isLiked: boolean;
        };
        CreateCommentDto: {
            /** @description content for create Comment */
            content: string;
        };
        PublicationsFollowersWithPaginationViewModel: {
            totalCount: number;
            pagesCount: number;
            page: number;
            pageSize: number;
            prevCursor: number;
            nextCursor: number | null;
            items: components["schemas"]["PostViewModel"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AuthController_checkPasswordRecovery: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordRecoveryCodeInputDto"];
            };
        };
        responses: {
            /** @description Recovery code is valid */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PasswordRecoveryViewDto"];
                };
            };
            /** @description If the recovery code is incorrect, expired or already been applied */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description More than 5 attempts from one IP-address during 10 seconds */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GithubOauthController_login: {
        parameters: {
            query: {
                redirect_url: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success, returns access token and user email as query parameters, and refresh token as a cookie */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description More than 5 attempts from one IP-address during 10 seconds */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GoogleOAuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProviderCodeInputDto"];
            };
        };
        responses: {
            /** @description Successful login */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderLoginResSwaggerDto"];
                };
            };
            /** @description Incorrect input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResultDto"];
                };
            };
            /** @description More than 5 attempts from one IP address within 10 seconds */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginInputDto"];
            };
        };
        responses: {
            /** @description success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenTypeSwaggerDto"];
                };
            };
            /** @description Incorrect input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResultDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description More than 5 attempts from one IP-address during 10 seconds */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description JWT accessToken is missing, expired or incorrect */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_getMyInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeViewDto"];
                };
            };
            /** @description JWT refreshToken inside cookie is missing, expired or incorrect */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_newPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NewPasswordInputDto"];
            };
        };
        responses: {
            /** @description success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Incorrect input data by field */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description More than 5 attempts from one IP-address during 10 seconds */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_passwordRecovery: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordRecoveryInputDto"];
            };
        };
        responses: {
            /** @description success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Incorrect input data by field or reCaptcha */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_resendingPasswordRecovery: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordRecoveryResendingInputDto"];
            };
        };
        responses: {
            /** @description success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_registration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterInputDto"];
            };
        };
        responses: {
            /** @description An email with a verification code has been sent to the specified email address */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Incorrect input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResultDto"];
                };
            };
            /** @description More than 5 attempts from one IP-address during 10 seconds */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_registrationConfirmation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfirmationCodeInputDto"];
            };
        };
        responses: {
            /** @description Email was verified. Account was activated */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Incorrect input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResultDto"];
                };
            };
            /** @description More than 5 attempts from one IP-address during 10 seconds */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_registrationEmailResending: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegistrationEmailResendingInputDto"];
            };
        };
        responses: {
            /** @description An email with a verification code has been sent to the specified email address */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Incorrect input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResultDto"];
                };
            };
            /** @description More than 5 attempts from one IP-address during 10 seconds */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_updateTokens: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenTypeSwaggerDto"];
                };
            };
            /** @description JWT refreshToken inside cookie is missing, expired or incorrect */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    HealthController_check: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Health Check is successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example ok */
                        status?: string;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       }
                         *     } */
                        info?: {
                            [key: string]: {
                                status?: string;
                            } & {
                                [key: string]: string;
                            };
                        } | null;
                        /** @example {} */
                        error?: {
                            [key: string]: {
                                status?: string;
                            } & {
                                [key: string]: string;
                            };
                        } | null;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       }
                         *     } */
                        details?: {
                            [key: string]: {
                                status?: string;
                            } & {
                                [key: string]: string;
                            };
                        };
                    };
                };
            };
            /** @description The Health Check is not successful */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example error */
                        status?: string;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       }
                         *     } */
                        info?: {
                            [key: string]: {
                                status?: string;
                            } & {
                                [key: string]: string;
                            };
                        } | null;
                        /** @example {
                         *       "redis": {
                         *         "status": "down",
                         *         "message": "Could not connect"
                         *       }
                         *     } */
                        error?: {
                            [key: string]: {
                                status?: string;
                            } & {
                                [key: string]: string;
                            };
                        } | null;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       },
                         *       "redis": {
                         *         "status": "down",
                         *         "message": "Could not connect"
                         *       }
                         *     } */
                        details?: {
                            [key: string]: {
                                status?: string;
                            } & {
                                [key: string]: string;
                            };
                        };
                    };
                };
            };
        };
    };
    HomeController_getPublicationsFollowers: {
        parameters: {
            query?: {
                pageSize?: number;
                pageNumber?: number;
                endCursorPostId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicationsFollowersWithPaginationViewModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The user has not been found or input params has incorrect values */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MessengerController_getAllMessages: {
        parameters: {
            query?: {
                /** @description ID of the last uploaded message. If cursor not provided, the first set of messages is returned. */
                cursor?: number;
                /** @description Number of items that should be returned */
                pageSize?: number;
                /** @description Search criteria by username */
                searchName?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InfinityPaginationViewModel"] & {
                        items?: components["schemas"]["LastMessageViewDto"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Too many requests per second. */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MessengerController_updateMessagesStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMessagesStatusDto"];
            };
        };
        responses: {
            /** @description Successfully updated */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No access rights */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Message not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Too many requests per second. */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MessengerController_findMessagesByUser: {
        parameters: {
            query?: {
                /** @description ID of the last uploaded message. If cursor not provided, the first set of messages is returned. */
                cursor?: number;
                /** @description Number of items that should be returned */
                pageSize?: number;
                /** @description Search criteria by username */
                searchName?: string;
            };
            header?: never;
            path: {
                dialoguePartnerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InfinityPaginationViewModel"] & {
                        items?: components["schemas"]["MessageViewModel"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Too many requests per second. */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MessengerController_deleteMessageById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Message deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No access rights */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Message not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Too many requests per second. */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NotificationController_updateNotificationsIsRead: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateNotificationIsReadDto"];
            };
        };
        responses: {
            /** @description The fields for the specified ids were successfully updated */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The inputModel has incorrect values */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResultDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NotificationController_getNotification: {
        parameters: {
            query?: {
                /** @description The server ignore the sortBy field, sorting occurs by the notifyAt field by default (the time the notification is sent to the client) */
                sortBy?: string;
                isRead?: boolean;
                /** @description page size is number of items that should be returned */
                pageSize?: number;
                /** @description Sort by desc or asc */
                sortDirection?: "asc" | "desc";
            };
            header?: never;
            path: {
                /** @description ID of the last uploaded notification. If cursor not provided, the first set of notifications is returned */
                cursor: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InfinityPaginationViewModel"] & {
                        items?: components["schemas"]["NotificationViewDto"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NotificationController_removeNotification: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The notification was successfully deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The notification object was not found by the specified id */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResultDto"];
                };
            };
        };
    };
    PostsController_createPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePostInputDto"];
            };
        };
        responses: {
            /** @description The post has been successfully created. The response body contains the post data */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostViewModel"];
                };
            };
            /** @description The inputModel has incorrect values */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResultDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_getPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The post has been successfully found. The response body contains the post data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostViewModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The post has not been found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_uploadImagePost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    file?: string[];
                };
            };
        };
        responses: {
            /** @description Uploaded image information object. Return array with Must contain medium photo size (_______) and thumbnail photo size (________) */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadedImageViewModel"];
                };
            };
            /** @description The inputModel has incorrect values */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResultDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_deleteImagePost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uploadId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The image post has been successfully deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The post has not been found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_getPostsByUser: {
        parameters: {
            query?: {
                /** @description page size is number of items that should be returned */
                pageSize?: number;
                /** @description Sort by parameters */
                sortBy?: string;
                /** @description Sort by desc or asc */
                sortDirection?: "asc" | "desc";
            };
            header?: never;
            path: {
                userId: number;
                /** @description ID of the last uploaded post. If endCursorPostId not provided, the first set of posts is returned */
                endCursorPostId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InfinityPaginatedPosts"] & {
                        items?: components["schemas"]["PostViewModel"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_getPosts: {
        parameters: {
            query?: {
                /** @description pageSize is number of items that should be returned */
                pageSize?: number;
                /** @description pageNumber is number of portions that should be returned */
                pageNumber?: number;
                /** @description Sort by parameters */
                sortBy?: string;
                /** @description Sort by desc or asc */
                sortDirection?: "asc" | "desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InfinityPaginationViewModel"] & {
                        items?: components["schemas"]["PostViewModel"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_updatePost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePostInputDto"];
            };
        };
        responses: {
            /** @description The post has been successfully updated */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The post has not been found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_deletePost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The post has been successfully deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The post has not been found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_getComments: {
        parameters: {
            query?: {
                /** @description pageSize is number of items that should be returned */
                pageSize?: number;
                /** @description pageNumber is number of portions that should be returned */
                pageNumber?: number;
                /** @description Sort by parameters */
                sortBy?: string;
                /** @description Sort by desc or asc */
                sortDirection?: "asc" | "desc";
            };
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InfinityPaginationViewModel"] & {
                        items?: components["schemas"]["CommentsViewModel"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsCommentsController_createComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCommentDto"];
            };
        };
        responses: {
            /** @description The comment has been successfully created. The response body contains the comment data */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentsViewModel"];
                };
            };
            /** @description The inputModel has incorrect values */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResultDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The post has not been found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_getAnswers: {
        parameters: {
            query?: {
                /** @description pageSize is number of items that should be returned */
                pageSize?: number;
                /** @description pageNumber is number of portions that should be returned */
                pageNumber?: number;
                /** @description Sort by parameters */
                sortBy?: string;
                /** @description Sort by desc or asc */
                sortDirection?: "asc" | "desc";
            };
            header?: never;
            path: {
                postId: number;
                commentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InfinityPaginationViewModel"] & {
                        items?: components["schemas"]["AnswersViewModel"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsCommentsController_createAnswerComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
                commentId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCommentDto"];
            };
        };
        responses: {
            /** @description The answer has been successfully created. The response body contains the answer data */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnswersViewModel"];
                };
            };
            /** @description The inputModel has incorrect values */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResultDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The comment has not been found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsCommentsController_updateLikeStatusAnswer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
                commentId: number;
                answerId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateLikeStatusDto"];
            };
        };
        responses: {
            /** @description The answer has been successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The answer has not been found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_getAnswerLikes: {
        parameters: {
            query?: {
                search?: string;
                pageSize?: number;
                pageNumber?: number;
                cursor?: number;
            };
            header?: never;
            path: {
                postId: number;
                commentId: number;
                answerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InfinityPaginationViewModel"] & {
                        items?: components["schemas"]["UserFollowingFollowersViewModel"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsCommentsController_updateLikeStatusComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
                commentId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateLikeStatusDto"];
            };
        };
        responses: {
            /** @description The comment has been successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The comment has not been found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_getCommentLikes: {
        parameters: {
            query?: {
                search?: string;
                pageSize?: number;
                pageNumber?: number;
                cursor?: number;
            };
            header?: never;
            path: {
                postId: number;
                commentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InfinityPaginationViewModel"] & {
                        items?: components["schemas"]["UserFollowingFollowersViewModel"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_updateLikeStatusPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateLikeStatusDto"];
            };
        };
        responses: {
            /** @description The post has been successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The post has not been found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_getLikes: {
        parameters: {
            query?: {
                search?: string;
                pageSize?: number;
                pageNumber?: number;
                cursor?: number;
            };
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InfinityPaginationViewModel"] & {
                        items?: components["schemas"]["UserFollowingFollowersViewModel"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PublicPostsController_getAllPosts: {
        parameters: {
            query?: {
                /** @description page size is number of items that should be returned */
                pageSize?: number;
                /** @description Sort by parameters */
                sortBy?: string;
                /** @description Sort by desc or asc */
                sortDirection?: "asc" | "desc";
            };
            header?: never;
            path: {
                /** @description ID of the last uploaded post. If endCursorPostId not provided, the first set of posts is returned. */
                endCursorPostId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InfinityPaginatedPosts"] & {
                        items?: components["schemas"]["PostViewModel"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PublicPostsController_getPostsByUser: {
        parameters: {
            query?: {
                /** @description page size is number of items that should be returned */
                pageSize?: number;
                /** @description Sort by parameters */
                sortBy?: string;
                /** @description Sort by desc or asc */
                sortDirection?: "asc" | "desc";
            };
            header?: never;
            path: {
                userId: number;
                /** @description ID of the last uploaded post. If endCursorPostId not provided, the first set of posts is returned */
                endCursorPostId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InfinityPaginatedPosts"] & {
                        items?: components["schemas"]["PostViewModel"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PublicPostsController_getPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The post has been successfully found. The response body contains the post data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostViewModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The post has not been found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PublicPostsController_getComments: {
        parameters: {
            query?: {
                /** @description pageSize is number of items that should be returned */
                pageSize?: number;
                /** @description pageNumber is number of portions that should be returned */
                pageNumber?: number;
                /** @description Sort by parameters */
                sortBy?: string;
                /** @description Sort by desc or asc */
                sortDirection?: "asc" | "desc";
            };
            header?: never;
            path: {
                postId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InfinityPaginationViewModel"] & {
                        items?: components["schemas"]["CommentsViewModel"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PublicUserController_GetCountRegisteredUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get total count registered users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseCountRegisteredUsers"];
                };
            };
            /** @description More than 5 attempts from one IP-address during 10 seconds */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PublicUserController_getPublicProfile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                profileId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get public profile information object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicProfileViewModel"];
                };
            };
            /** @description Profile not found with id 1 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SessionsController_getSessions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of all user sessions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAllUserSessionsResponseDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description More than 5 attempts from one IP-address during 10 seconds */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SessionsController_terminateAllSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Sessions successfully deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description More than 5 attempts from one IP-address during 10 seconds. */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SessionsController_deleteSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Session successfully deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request, e.g. invalid session ID format. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Session not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description More than 5 attempts from one IP-address during 10 seconds. */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SubscriptionsController_createSubscription: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSubscriptionInputDto"];
            };
        };
        responses: {
            /** @description The payment-subscriptions has been successfully created with status pending, need to pay */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentSessionUrlViewModel"];
                };
            };
            /** @description The inputModel has incorrect values */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResultDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SubscriptionsController_canceledAutoRenewal: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Cancel auto renewal */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetSubscriptionsController_getCurrentCostSubscription: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get cost of payment-subscriptions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionPriceViewModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SubscriptionsController_getCurrentSubscription: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get current payment-subscriptions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CurrentActiveSubscriptionsViewModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SubscriptionsController_getMyPayments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get payments */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentsViewModel"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SubscriptionsController_renewAutoRenewal: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Renew auto renewal */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Subscription already expired */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResultDto"];
                };
            };
        };
    };
    UsersFollowController_searchUsers: {
        parameters: {
            query?: {
                search?: string;
                pageSize?: number;
                pageNumber?: number;
                cursor?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get profile user  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWithPaginationViewDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersFollowController_removeFollower: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersFollowController_subscriptionToUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserSubscriptionInputDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_getMyProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get profile information object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileViewModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_updateProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProfileInputDto"];
            };
        };
        responses: {
            /** @description Updated profile information object */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The inputModel has incorrect values */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResultDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_deleteProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success deleted profile */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_uploadPhotoAvatar: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file?: string;
                };
            };
        };
        responses: {
            /** @description Uploaded image information object. Return array with Must contain medium photo size (192x192) and thumbnail photo size (45x45) */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AvatarsViewModel"];
                };
            };
            /** @description The inputModel has incorrect values */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResultDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_deleteAvatarProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success deleted avatar */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_deleteProfileById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success deleted profile */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersFollowController_getProfileByUserName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get profile user by userId with posts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileWithPostsViewModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersFollowController_getFollowers: {
        parameters: {
            query?: {
                search?: string;
                pageSize?: number;
                pageNumber?: number;
                cursor?: number;
            };
            header?: never;
            path: {
                userName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get followers by username  */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FollowingWithPaginationViewModel"];
                };
            };
            /** @description The inputModel has incorrect values */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResultDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersFollowController_getFollowing: {
        parameters: {
            query?: {
                search?: string;
                pageSize?: number;
                pageNumber?: number;
                cursor?: number;
            };
            header?: never;
            path: {
                userName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get followers by username */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FollowingWithPaginationViewModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
