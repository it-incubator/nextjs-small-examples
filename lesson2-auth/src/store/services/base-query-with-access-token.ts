import {BaseQueryFn, FetchArgs, fetchBaseQuery, FetchBaseQueryError} from "@reduxjs/toolkit/query/react";
import {Mutex} from "async-mutex";

export const baseQueryWithAccessToken = fetchBaseQuery({
    baseUrl: 'http://localhost:3000/api',
    prepareHeaders: (headers, {getState}) => {
        // you can take accessToken from localStorage/sessionStorage
        const token = sessionStorage.getItem('access-token');

        // If we have a token set in state, let's assume that we should be passing it.
        if (token) {
            headers.set('authorization', `Bearer ${token}`)
        }

        return headers
    },
})

// as example for lessons
export const baseQueryWithRefreshWithoutMutexAsExample: BaseQueryFn<
    string | FetchArgs,
    unknown,
    FetchBaseQueryError
> = async (args, api, extraOptions) => {
    let result = await baseQueryWithAccessToken(args, api, extraOptions) // üöÄ main request, example /me or /messages

    if (result.error?.status === 401 ||
        (result.error?.status === 'PARSING_ERROR' && result.error?.originalStatus === 401) // ‚ùå 401 response, accessToken expired
    ) {
        try {
            // üçî –±—É—Ä–≥–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ —Ñ–∞–Ω –Ω–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ) –≤ –ø—Ä–∏–Ω–∏—Ü–ø–µ.. –µ—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç –∞–∫–∫—Å–µ —Ç–æ–∫–µ–Ω–∞.. —Ç–æ –∏ –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞ –¥–µ–ª–∞—Ç—å —Ä–µ—Ñ—Ä–µ—à, –ø–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–∞—Å –ª–∏–±–æ 2 —Ç–æ–∫–µ–Ω–∞ –µ—Å—Ç—å.. –ª–∏–±–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ
            // —Ç–∞–∫–∞—è –ø–æ–ª—É–±–µ—Å–ø–æ–ª–µ–∑–Ω–∞—è –º–∏–∫—Ä–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è.. —Å–∫–æ—Ä–µ–µ –¥–ª—è —Ä–∞–∑–º–∏–Ω–∫–∏ –º–æ–∑–≥–æ–≤ –∏ –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            //
            // const token = localStorage.getItem('access-token'); // –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ
            // if (!token) {
            //     return result;
            // }

            const refreshResult = await baseQueryWithAccessToken( // üåà refresh tokens pair
                {
                    url: 'auth/refresh', method: 'POST', body: {
                        refreshToken: localStorage.getItem('refresh-token')
                    }, // Include the body if needed, e.g., { refreshToken: '...' }
                },
                api,
                extraOptions
            )
            if (refreshResult.data) {
                sessionStorage.setItem('access-token', refreshResult.data.accessToken)
                localStorage.setItem('refresh-token', refreshResult.data.refreshToken)
                const newResult  = await baseQueryWithAccessToken(args, api, extraOptions) // repeat üöÄ main request with fresh accesstoken
                return newResult; // ‚úÖ success response
            } else {
                // localStorage.removeItem('access-token'); // —ç—Ç–æ –µ—Å–ª–∏ –¥–µ–ª–∞–µ–º üçî –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
                return result; // ‚ùå 401 response
            }
        } catch (error) {
            console.error(error)
            // localStorage.removeItem('access-token'); üçî –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
            return result; // ‚ùå 401 response
        }
    }

    return result; // some of these answers ‚ùå 400 | 500 | 200 | 201 | 403 // Forbidden
}


// create a new mutex
const mutex = new Mutex()
// const successRefresh = false; // default true
// for using
export const baseQueryWithReauth: BaseQueryFn<
    string | FetchArgs,
    unknown,
    FetchBaseQueryError
> = async (args, api, extraOptions) => {
    // wait until the mutex is available without locking it
    await mutex.waitForUnlock() // –º–æ–∂–µ—Ç –∫—Ç–æ-—Ç–æ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã —Ç–æ–∫–µ–Ω–æ–≤? —è –ø–æ–¥–æ–∂–¥—É await,
    // –∑–∞—á–µ–º –º–Ω–µ –¥–µ–ª–∞—Ç—å –∑–∞–≤–µ–¥–æ–º–æ not authorized –∑–∞–ø—Ä–æ—Å
    // 1
    let result = await baseQueryWithAccessToken(args, api, extraOptions) // üöÄ main request, example /me or /messages

    if (result.error?.status === 401 || result.error?.originalStatus === 401) {
        console.log('baseQueryWithReauth: NEED REAUTH: ' + args)
        // checking whether the mutex is locked
        if (mutex.isLocked()) {
            // wait until the mutex is available without locking it
            await mutex.waitForUnlock()
            return baseQueryWithAccessToken(args, api, extraOptions) // –∏–ª–∏ ‚ùå –∏–ª–∏ ‚úÖ
        }
        else {
            // –ø–æ–∫–∞ —è –¥–µ–ª–∞–ª —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å, –∫—Ç–æ-—Ç–æ –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å mutex
            const release = await mutex.acquire() // üîí –±–ª–æ–∫–∏—Ä—É–µ–º mutex
            try {
                const refreshResult = await baseQueryWithAccessToken(
                    {
                        url: 'auth/refresh',
                        method: 'POST',
                        body: {}, // Include the body if needed, e.g., { refreshToken: '...' }
                    },
                    api,
                    extraOptions
                )
                if (refreshResult.data) {
                    // @ts-ignore
                    sessionStorage.setItem('access-token', refreshResult.data.accessToken)
                    return await baseQueryWithAccessToken(args, api, extraOptions)
                } else {
                    // api.dispatch(loggedOut())
                    // posiible scenario if refresh —Ç–æ–∫–µ–Ω —Ç–æ–∂–µ –∫–æ—Ä–æ—Ç–∫–æ–∂–∏–≤—É—â–∏–π –∏ –≤–∫–ª–∞–¥–∫–∞ –¥–æ–ª–≥–æ –æ—Ç–∫—Ä—ã—Ç–∞, —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º—ë—Ç
                    // –∫–Ω–æ–ø–∫—É, –∞ —É –Ω–µ–≥–æ –ø—Ä–æ—Ç—É—Ö –∏ –∞–∫–∫—Å—Å–µ–µ –∏ —Ä–µ—Ñ—Ä–µ—à, —Ç–æ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω—É–∂–Ω–æ —è–≤–Ω–æ –µ–≥–æ –≤—ã–ª–æ–≥–∏–Ω–∏—Ç—å (–∑–∞—á–∏—Å—Ç–∏—Ç—å auth –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å—Ç–µ–π—Ç–µ)
                    // ‚ùå clear all tokens
                }
            } catch (error) {
                console.error(error)
                // ‚ùå clear all tokens
            } finally {
                // release must be called once the mutex should be released again.
                release()
            }
        }
    }
    // 2
    return result
}

